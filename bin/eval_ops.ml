open Exceptions;;
open Syntax;;

(* evaluates primitive operations on the evaluated operands *)
let eval_op v1 op v2 = 
  match (op, v1, v2) with
  (* Math operators for integers and floats *)
  | ("*", Int i1, Int i2) -> Int (i1 * i2)
  | ("+", Int i1, Int i2) -> Int (i1 + i2)
  | ("-", Int i1, Int i2) -> Int (i1 - i2)
  | ("/", Int i1, Int i2) -> Int (i1 / i2)
  | ("%", Int i1, Int i2) -> Int (i1 mod i2)
  | ("*.", Float i1, Float i2) -> Float (i1 *. i2)
  | ("+.", Float i1, Float i2) -> Float (i1 +. i2)
  | ("-.", Float i1, Float i2) -> Float (i1 -. i2)
  | ("/.", Float i1, Float i2) -> Float (i1 /. i2)
  (* Define comparison operators for each simple type *)
  | ("=", Int i1, Int i2) -> Bool (if i1 = i2 then true else false)
  | ("=", Float i1, Float i2) -> Bool (if i1 = i2 then true else false)
  | ("=", Char i1, Char i2) -> Bool (if i1 = i2 then true else false)
  | ("=", Bool i1, Bool i2) -> Bool (if i1 = i2 then true else false)
  | ("=", String i1, String i2) -> Bool (if i1 = i2 then true else false)
  | ("<>", Int i1, Int i2) -> Bool (if i1 <> i2 then true else false)
  | ("<>", Float i1, Float i2) -> Bool (if i1 <> i2 then true else false)
  | ("<>", Char i1, Char i2) -> Bool (if i1 <> i2 then true else false)
  | ("<>", Bool i1, Bool i2) -> Bool (if i1 <> i2 then true else false)
  | ("<>", String i1, String i2) -> Bool (if i1 <> i2 then true else false)
  | ("<", Int i1, Int i2) -> Bool (if i1 < i2 then true else false)
  | ("<", Float i1, Float i2) -> Bool (if i1 < i2 then true else false)
  | ("<", Char i1, Char i2) -> Bool (if i1 < i2 then true else false)
  | ("<", Bool i1, Bool i2) -> Bool (if i1 < i2 then true else false)
  | ("<", String i1, String i2) -> Bool (if i1 < i2 then true else false)
  | (">", Int i1, Int i2) -> Bool (if i1 > i2 then true else false)
  | (">", Float i1, Float i2) -> Bool (if i1 > i2 then true else false)
  | (">", Char i1, Char i2) -> Bool (if i1 > i2 then true else false)
  | (">", Bool i1, Bool i2) -> Bool (if i1 > i2 then true else false)
  | (">", String i1, String i2) -> Bool (if i1 > i2 then true else false)
  | ("<=", Int i1, Int i2) -> Bool (if i1 <= i2 then true else false)
  | ("<=", Float i1, Float i2) -> Bool (if i1 <= i2 then true else false)
  | ("<=", Char i1, Char i2) -> Bool (if i1 <= i2 then true else false)
  | ("<=", Bool i1, Bool i2) -> Bool (if i1 <= i2 then true else false)
  | ("<=", String i1, String i2) -> Bool (if i1 <= i2 then true else false)
  | (">=", Int i1, Int i2) -> Bool (if i1 >= i2 then true else false)
  | (">=", Float i1, Float i2) -> Bool (if i1 >= i2 then true else false)
  | (">=", Char i1, Char i2) -> Bool (if i1 >= i2 then true else false)
  | (">=", Bool i1, Bool i2) -> Bool (if i1 >= i2 then true else false)
  | (">=", String i1, String i2) -> Bool (if i1 >= i2 then true else false)
  (* logical operators *)
  | ("&&", Bool i1, Bool i2) -> Bool (i1 && i2)
  | ("||", Bool i1, Bool i2) -> Bool (i1 || i2)
  (* strings concatenation *)
  | ("^", String s1, String s2) -> String (s1^s2)
  |  _ -> raise (Unsupported_Primitive(op) )
;;